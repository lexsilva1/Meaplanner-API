Analysis of Mixed Deterministic and RAG Approach for Meal Plan Generation
Overview
The script implements a hybrid meal plan generation system combining a deterministic algorithm with an AI agent leveraging Retrieval-Augmented Generation (RAG) using an Ollama LLM. The system generates a 3-day meal plan tailored to a user's calorie needs, dietary preferences, and fitness goals, with fallback to a deterministic method if the AI approach fails.
Strengths of the Mixed Approach
1. Robustness through Fallback Mechanism

Description: The system defaults to a deterministic algorithm if the AI agent fails, ensuring that a meal plan is always generated.
Benefit: Enhances reliability, critical for user-facing applications where consistent output is expected.
Evidence: The Command.handle method catches exceptions from generate_meal_plan_agent and invokes generate_meal_plan as a fallback.

2. Personalization

Description: Both approaches incorporate user-specific data (dietary preferences, feedback, activity level, and goals) to tailor meal plans.
Benefit: Improves user satisfaction by aligning plans with individual needs.
Evidence: Functions like score_recipe use user feedback and preferences, and generate_meal_plan_agent includes user-specific data in the prompt.

3. Flexible Recipe Selection

Description: The deterministic approach uses a scoring mechanism (score_recipe) to select recipes based on calorie alignment, user feedback, and tags, while the RAG approach leverages LLM reasoning over candidate recipes.
Benefit: Balances structured selection with AI-driven flexibility, potentially capturing nuanced user preferences.
Evidence: select_recipe_for_part and select_recipe_for_simple_meal use scoring, while generate_meal_plan_agent provides candidates to the LLM.

4. Validation and Correction

Description: The AI-generated plan is validated (validate_ai_meal_plan) and fixed (fix_ai_meal_plan) to ensure compliance with requirements (e.g., calorie targets, meal structure).
Benefit: Mitigates LLM inconsistencies, ensuring the output meets predefined criteria.
Evidence: fix_ai_meal_plan reconstructs invalid plans using deterministic logic.

5. Scalability with RAG

Description: The RAG approach retrieves relevant recipes (candidate_data_for_prompt) to inform the LLM, reducing hallucination and grounding outputs in actual data.
Benefit: Scales with growing recipe databases and adapts to new user preferences without retraining.
Evidence: generate_meal_plan_agent fetches top-10 candidates per meal part and day type.

Weaknesses of the Mixed Approach
1. Complexity and Maintenance Overhead

Issue: The hybrid system is complex, with separate deterministic and RAG pipelines, validation/fixing logic, and extensive error handling.
Impact: Increases development and maintenance costs, with potential for bugs in edge cases.
Evidence: Functions like fix_ai_meal_plan duplicate deterministic logic, and the script has multiple layers of JSON parsing (extract_json).

2. Limited LLM Utilization

Issue: The AI agent's role is constrained to selecting recipes from pre-filtered candidates, limiting its ability to propose creative or novel combinations.
Impact: Reduces the potential for innovative meal plans that could better align with user preferences.
Evidence: The prompt in generate_meal_plan_agent restricts the LLM to choosing selected_recipe_id from provided candidates.

3. Inconsistent AI Output Handling

Issue: The extract_json function uses multiple fallbacks (regex, key fixing) to parse LLM output, indicating unreliable JSON formatting from the LLM.
Impact: Increases risk of parsing failures and adds computational overhead.
Evidence: Multiple try-except blocks in extract_json and reliance on fix_invalid_json_keys.

4. Over-Reliance on Deterministic Fixes

Issue: The AI plan is often corrected by fix_ai_meal_plan, which applies deterministic logic, potentially negating the LLM's contributions.
Impact: Reduces the value of the RAG approach if the deterministic method frequently overrides AI output.
Evidence: fix_ai_meal_plan rebuilds entire days if validation fails, using select_recipe_for_part and select_recipe_for_simple_meal.

5. Limited Nutritional Optimization

Issue: While calorie targets are enforced, macronutrient distribution (protein, carbs, fat) is not optimized beyond static ratios (get_macro_targets).
Impact: May result in unbalanced plans, especially for specific goals like muscle gain.
Evidence: calculate_day_nutrition tracks macros but does not adjust recipe selection to meet macro targets dynamically.

Potential Improvements for the AI Agent
1. Enhance LLM Creativity

Suggestion: Allow the LLM to propose meal structures or recipe combinations beyond pre-filtered candidates, using constraints (e.g., tags, calories) to guide output.
Implementation: Modify the prompt to request a full meal plan structure, then map LLM suggestions to available recipes in a post-processing step.
Benefit: Leverages LLM's reasoning for more innovative plans while maintaining grounding in the recipe database.

2. Improve JSON Output Reliability

Suggestion: Use structured output techniques (e.g., JSON schema enforcement in the prompt or fine-tuned LLM) to ensure consistent JSON formatting.
Implementation: Include a JSON schema in the prompt and instruct the LLM to adhere strictly to it, reducing reliance on extract_json fallbacks.
Benefit: Simplifies parsing and reduces error handling overhead.

3. Optimize Macronutrient Balancing

Suggestion: Incorporate dynamic macronutrient optimization in both deterministic and RAG approaches, adjusting recipe selection to meet macro targets.
Implementation: Extend score_recipe to include macro alignment scores and modify the LLM prompt to prioritize recipes that balance macros.
Benefit: Enhances nutritional quality, especially for fitness goals.

4. Streamline Validation and Fixing

Suggestion: Integrate validation into the LLM prompt to minimize the need for post-processing fixes, and simplify fix_ai_meal_plan to handle only critical errors.
Implementation: Add explicit instructions in the prompt to enforce meal structure and calorie targets, and limit fix_ai_meal_plan to recipe replacement rather than rebuilding entire days.
Benefit: Reduces complexity and improves efficiency.

5. Adaptive Candidate Selection

Suggestion: Dynamically adjust the number of candidate recipes based on meal type or user preferences, and include diversity metrics (e.g., avoid repetitive recipes).
Implementation: Modify generate_meal_plan_agent to fetch more candidates for complex meals (e.g., lunch) and add a diversity check in select_recipe_for_part.
Benefit: Improves variety and relevance of meal plans.

Analysis of the AI Agent Prompt
Current Prompt Structure
The prompt in generate_meal_plan_agent consists of:

Introduction: Describes the task, user details, calorie targets, and meal structure requirements.
Candidate Recipes: Lists top-10 candidate recipes per meal part and day type, with details (ID, title, calories, tags).
Output Format: Specifies the expected JSON structure with an example.

Strengths of the Prompt

Clarity: Clearly outlines requirements, including calorie targets, meal structures, and valid tags.
Contextual Data: Provides detailed candidate recipes, grounding the LLM's output in actual data.
Structured Output: Includes an example JSON structure, guiding the LLM toward the desired format.

Weaknesses of the Prompt

Overly Restrictive: Limits the LLM to selecting from pre-filtered candidates, stifling creativity.
Example: Instructs the LLM to set "selected_recipe_id": <recipe_id_or_null> without room for proposing new meal structures.


Verbose and Complex: The prompt is lengthy, with repetitive candidate sections, potentially overwhelming the LLM.
Example: Candidate sections repeat for each day type, meal, and part, increasing token count.


Weak JSON Enforcement: Relies on the LLM to produce valid JSON without strict schema enforcement, leading to parsing issues.
Example: No explicit JSON schema or validation instructions beyond the example.


Limited Nutritional Guidance: Mentions calorie targets but does not emphasize macronutrient balance or dietary preferences.
Example: Macro targets are included in the output format but not as selection criteria.



Suggested Prompt Improvements
Below is an improved prompt structure designed to address the identified weaknesses.

You are an expert meal planning assistant. Generate a 3-day JSON meal plan for user {user.email} targeting approximately {daily_calories} kcal/day, adjusted per day type, with goal '{goal}'.

Requirements:

Exactly three days: 'regular', 'workout', 'rest'.
Calorie targets:
Regular: {daily_calories} kcal
Workout: {int(daily_calories*1.20)} kcal
Rest: {int(daily_calories*0.90)} kcal
Meal distribution: breakfast (25%), lunch (35%), dinner (30%), mid_morning (5%), mid_afternoon (5%), supper (10%), pre-workout (5%, workout day), post-workout (5%, workout day).


Meal structure:
Breakfast: 'main course' (required), 'fruit' (optional, select 50% of time), 'dairy' (optional, select 50% of time).
Lunch: 'main course' (required), 'soup' (optional, select 50% of time).
Dinner: 'main course' (required), 'soup' (optional, select 50% of time).
Simple meals (mid_morning, mid_afternoon, supper): 'main course' only, mapping mid_morning/mid_afternoon to 'breakfast' tags, supper to 'dinner' tags.
Workout meals (pre-workout, post-workout): 'main course' only.


Recipe selection:
Choose from provided candidate recipes or set 'selected_recipe_id' to null if no suitable recipe exists.
Prioritize recipes matching meal and part tags, aligning with calorie targets (Â±15%) and user preferences: {user.dietary_preferences}.
Balance macronutrients (protein: {macro_targets['protein']*100}%, carbs: {macro_targets['carbs']*100}%, fat: {macro_targets['fat']*100}%).
Ensure variety by avoiding duplicate recipes across days.


Valid tags: vegetarian, vegan, lunch, dinner, post-workout, pre-workout, soup, dairy, fruit, healthy, breakfast, main course.
Output a single valid JSON object adhering to the schema below, with no extra text.

Candidate Recipes:{candidate_sections}
JSON Schema:{  "type": "object",  "required": ["meal_plan_title", "user_email", "base_daily_calories", "goal", "macro_targets", "days"],  "properties": {    "meal_plan_title": {"type": "string"},    "user_email": {"type": "string"},    "base_daily_calories": {"type": "number"},    "goal": {"type": "string"},    "macro_targets": {      "type": "object",      "properties": {        "protein": {"type": "number"},        "carbs": {"type": "number"},        "fat": {"type": "number"}      }    },    "days": {      "type": "array",      "minItems": 3,      "maxItems": 3,      "items": {        "type": "object",        "required": ["date", "day_type", "target_calories_for_day", "meals"],        "properties": {          "date": {"type": "string", "format": "date"},          "day_type": {"type": "string", "enum": ["regular", "workout", "rest"]},          "target_calories_for_day": {"type": "number"},          "meals": {            "type": "array",            "items": {              "type": "object",              "required": ["meal_type", "allocated_calories_for_meal", "parts"],              "properties": {                "meal_type": {"type": "string"},                "allocated_calories_for_meal": {"type": "number"},                "parts": {                  "type": "array",                  "items": {                    "type": "object",                    "required": ["name", "selected_recipe_id"],                    "properties": {                      "name": {"type": "string"},                      "selected_recipe_id": {"type": ["number", "null"]}                    }                  }                }              }            }          }        }      }    }  }}
Output Format Example:{  "meal_plan_title": "AI Generated Meal Plan for {user.name or user.email}",  "user_email": "{user.email}",  "base_daily_calories": {daily_calories},  "goal": "{goal}",  "macro_targets": {json.dumps(get_macro_targets(goal))},  "days": [    {      "date": "2025-05-16",      "day_type": "regular",      "target_calories_for_day": {daily_calories},      "meals": [        {          "meal_type": "breakfast",          "allocated_calories_for_meal": {int(daily_calories*0.25)},          "parts": [            {"name": "main course", "selected_recipe_id": 1},            {"name": "fruit", "selected_recipe_id": null},            {"name": "dairy", "selected_recipe_id": null}          ]        }      ]    }  ]}
