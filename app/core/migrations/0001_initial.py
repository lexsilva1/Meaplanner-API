# Generated by Django 4.0.10 on 2025-04-11 16:00

import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(default='', max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_group', models.IntegerField(db_column='idGroup', default=0, unique=True)),
                ('name', models.CharField(default='', max_length=255)),
                ('known_food_group_type', models.CharField(db_column='knownFoodGroupType', default='', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_ingredient', models.IntegerField(db_column='idIngredient', default=0, unique=True)),
                ('hide_from_user', models.BooleanField(db_column='hideFromUser', default=False)),
                ('name', models.CharField(default='', max_length=255)),
                ('english_name', models.CharField(db_column='englishName', default='', max_length=255)),
                ('original_name', models.CharField(db_column='originalName', default='', max_length=255)),
                ('external_id', models.CharField(db_column='externalID', default='', max_length=50)),
                ('is_recipe', models.BooleanField(db_column='isRecipe', default=False)),
                ('dose_gr', models.FloatField(db_column='doseGr', default=0.0)),
                ('is_liquid', models.BooleanField(db_column='isLiquid', default=False)),
                ('image', models.ImageField(null=True, upload_to=core.models.ingredient_image_file_path)),
                ('groups', models.ManyToManyField(blank=True, to='core.group')),
                ('user', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=255)),
                ('description', models.TextField(blank=True, default='')),
                ('link', models.CharField(blank=True, default='', max_length=255)),
                ('image', models.ImageField(null=True, upload_to=core.models.recipe_image_file_path)),
                ('external_id', models.IntegerField(blank=True, null=True, unique=True)),
                ('is_orderable', models.BooleanField(default=False)),
                ('is_hidden', models.BooleanField(default=False)),
                ('creation_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('modification_time', models.DateTimeField(auto_now=True, null=True)),
                ('ingredients', models.ManyToManyField(blank=True, to='core.ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='Vitamins',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vitamin_c', models.FloatField(db_column='vitaminC', default=0.0)),
                ('thiamin', models.FloatField(default=0.0)),
                ('ribo_flavin', models.FloatField(db_column='riboFlavin', default=0.0)),
                ('niacin', models.FloatField(default=0.0)),
                ('vitamin_b6', models.FloatField(db_column='vitaminB6', default=0.0)),
                ('folate', models.FloatField(default=0.0)),
                ('vitamin_b12', models.FloatField(db_column='vitaminB12', default=0.0)),
                ('vitamin_a', models.FloatField(db_column='vitaminA', default=0.0)),
                ('vitamin_d', models.FloatField(db_column='vitaminD', default=0.0)),
                ('ingredient', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vitamins', to='core.ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(default=0.0)),
                ('notes', models.CharField(blank=True, default='', max_length=255)),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ingredient')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.recipe')),
            ],
            options={
                'unique_together': {('recipe', 'ingredient')},
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='ingredients_v2',
            field=models.ManyToManyField(blank=True, related_name='recipes_v2', through='core.RecipeIngredient', to='core.ingredient'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='tags',
            field=models.ManyToManyField(blank=True, to='core.tag'),
        ),
        migrations.AddField(
            model_name='recipe',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Minerals',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calcium', models.FloatField(default=0.0)),
                ('iron', models.FloatField(default=0.0)),
                ('magnesium', models.FloatField(default=0.0)),
                ('phosphorus', models.FloatField(default=0.0)),
                ('potassium', models.FloatField(default=0.0)),
                ('zinc', models.FloatField(default=0.0)),
                ('sodium', models.FloatField(default=0.0)),
                ('ingredient', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='minerals', to='core.ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='In100g',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('energy', models.FloatField(default=0.0)),
                ('carbohydrate', models.FloatField(default=0.0)),
                ('cholesterol', models.FloatField(default=0.0)),
                ('fat', models.FloatField(default=0.0)),
                ('fiber', models.FloatField(default=0.0)),
                ('protein', models.FloatField(default=0.0)),
                ('water', models.FloatField(default=0.0)),
                ('alcohol', models.FloatField(default=0.0)),
                ('starch', models.FloatField(default=0.0)),
                ('sugar', models.FloatField(default=0.0)),
                ('salt', models.FloatField(default=0.0)),
                ('vitamin_c', models.FloatField(db_column='vitaminC', default=0.0)),
                ('thiamin', models.FloatField(default=0.0)),
                ('ribo_flavin', models.FloatField(db_column='riboFlavin', default=0.0)),
                ('niacin', models.FloatField(default=0.0)),
                ('vitamin_b6', models.FloatField(db_column='vitaminB6', default=0.0)),
                ('folate', models.FloatField(default=0.0)),
                ('vitamin_b12', models.FloatField(db_column='vitaminB12', default=0.0)),
                ('vitamin_a', models.FloatField(db_column='vitaminA', default=0.0)),
                ('vitamin_d', models.FloatField(db_column='vitaminD', default=0.0)),
                ('calcium', models.FloatField(default=0.0)),
                ('iron', models.FloatField(default=0.0)),
                ('magnesium', models.FloatField(default=0.0)),
                ('phosphorus', models.FloatField(default=0.0)),
                ('potassium', models.FloatField(default=0.0)),
                ('zinc', models.FloatField(default=0.0)),
                ('sodium', models.FloatField(default=0.0)),
                ('saturated_fatty_acids', models.FloatField(default=0.0)),
                ('mono_unsaturated_fatty_acids', models.FloatField(db_column='monoUnsaturatedFattyAcids', default=0.0)),
                ('poly_unsaturated_fatty_acids', models.FloatField(db_column='polyUnsaturatedFattyAcids', default=0.0)),
                ('trans_fatty_acids', models.FloatField(db_column='transFattyAcids', default=0.0)),
                ('ingredient', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='in100g', to='core.ingredient')),
            ],
        ),
        migrations.CreateModel(
            name='FattyAcids',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saturated_fatty_acids', models.FloatField(db_column='saturatedFattyAcids', default=0.0)),
                ('mono_unsaturated_fatty_acids', models.FloatField(db_column='monoUnsaturatedFattyAcids', default=0.0)),
                ('poly_unsaturated_fatty_acids', models.FloatField(db_column='polyUnsaturatedFattyAcids', default=0.0)),
                ('trans_fatty_acids', models.FloatField(db_column='transFattyAcids', default=0.0)),
                ('ingredient', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fatty_acids', to='core.ingredient')),
            ],
        ),
    ]
