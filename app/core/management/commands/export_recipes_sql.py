import os
from django.core.management.base import BaseCommand
from django.db import connection
from core.models import Recipe, RecipeIngredient, Tag, Ingredient, In100g, FattyAcids, Vitamins, Minerals, Group

class Command(BaseCommand):
    help = "Export all Recipe data and related information to SQL file"

    def add_arguments(self, parser):
        parser.add_argument('--output', type=str, default='recipes_export.sql',
                          help='Output SQL file name (default: recipes_export.sql)')
        parser.add_argument('--include-users', action='store_true',
                          help='Include user data in export')

    def handle(self, *args, **options):
        output_file = options['output']
        include_users = options['include_users']

        self.stdout.write(self.style.SUCCESS(f"Starting recipe export to {output_file}..."))

        with open(output_file, 'w', encoding='utf-8') as f:
            # Write SQL header
            f.write("-- Recipe Database Export\n")
            f.write("-- Generated by Django management command\n")
            f.write("-- File contains all recipe data and related information\n\n")
            f.write("SET FOREIGN_KEY_CHECKS = 0;\n\n")

            # Export in dependency order
            if include_users:
                self._export_users(f)

            self._export_groups(f)
            self._export_tags(f)
            self._export_ingredients_and_nutrition(f)
            self._export_recipes(f)
            self._export_recipe_ingredients(f)
            self._export_recipe_tags(f)

            f.write("SET FOREIGN_KEY_CHECKS = 1;\n")

        self.stdout.write(self.style.SUCCESS(f"Export completed successfully: {output_file}"))

        # Show statistics
        recipe_count = Recipe.objects.count()
        ingredient_count = Ingredient.objects.count()
        tag_count = Tag.objects.count()

        self.stdout.write(f"Exported:")
        self.stdout.write(f"  - {recipe_count} recipes")
        self.stdout.write(f"  - {ingredient_count} ingredients")
        self.stdout.write(f"  - {tag_count} tags")

    def _export_users(self, f):
        """Export user data if requested"""
        f.write("-- Users\n")
        f.write("DROP TABLE IF EXISTS `auth_user`;\n")

        # Get the actual table structure
        with connection.cursor() as cursor:
            cursor.execute("SHOW CREATE TABLE auth_user")
            create_table = cursor.fetchone()[1]
            f.write(f"{create_table};\n\n")

            # Export user data
            cursor.execute("SELECT * FROM auth_user")
            columns = [desc[0] for desc in cursor.description]

            for row in cursor.fetchall():
                values = []
                for value in row:
                    if value is None:
                        values.append('NULL')
                    elif isinstance(value, str):
                        # Escape single quotes
                        escaped = value.replace("'", "''")
                        values.append(f"'{escaped}'")
                    else:
                        values.append(str(value))

                f.write(f"INSERT INTO `auth_user` ({', '.join([f'`{col}`' for col in columns])}) VALUES ({', '.join(values)});\n")
        f.write("\n")

    def _export_groups(self, f):
        """Export ingredient groups"""
        f.write("-- Groups\n")
        f.write("DROP TABLE IF EXISTS `core_group`;\n")
        f.write("""CREATE TABLE `core_group` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `idGroup` int NOT NULL DEFAULT '0',
  `name` varchar(255) NOT NULL DEFAULT '',
  `knownFoodGroupType` varchar(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  UNIQUE KEY `idGroup` (`idGroup`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        for group in Group.objects.all():
            f.write(f"INSERT INTO `core_group` VALUES ({group.id}, {group.id_group}, '{self._escape_sql(group.name)}', '{self._escape_sql(group.known_food_group_type)}');\n")
        f.write("\n")

    def _export_tags(self, f):
        """Export tags"""
        f.write("-- Tags\n")
        f.write("DROP TABLE IF EXISTS `core_tag`;\n")
        f.write("""CREATE TABLE `core_tag` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '',
  `user_id` int NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        for tag in Tag.objects.all():
            f.write(f"INSERT INTO `core_tag` VALUES ({tag.id}, '{self._escape_sql(tag.name)}', {tag.user_id});\n")
        f.write("\n")

    def _export_ingredients_and_nutrition(self, f):
        """Export ingredients and all related nutritional data"""

        # Ingredients table
        f.write("-- Ingredients\n")
        f.write("DROP TABLE IF EXISTS `core_ingredient`;\n")
        f.write("""CREATE TABLE `core_ingredient` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `idIngredient` int NOT NULL DEFAULT '0',
  `hideFromUser` tinyint(1) NOT NULL DEFAULT '0',
  `name` varchar(255) NOT NULL DEFAULT '',
  `englishName` varchar(255) NOT NULL DEFAULT '',
  `originalName` varchar(255) NOT NULL DEFAULT '',
  `externalID` varchar(50) NOT NULL DEFAULT '',
  `isRecipe` tinyint(1) NOT NULL DEFAULT '0',
  `doseGr` double NOT NULL DEFAULT '0',
  `isLiquid` tinyint(1) NOT NULL DEFAULT '0',
  `image` varchar(100) DEFAULT NULL,
  `user_id` int NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`),
  UNIQUE KEY `idIngredient` (`idIngredient`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        for ingredient in Ingredient.objects.all():
            image_path = f"'{ingredient.image.name}'" if ingredient.image else 'NULL'
            f.write(f"INSERT INTO `core_ingredient` VALUES ({ingredient.id}, {ingredient.id_ingredient}, {int(ingredient.hide_from_user)}, '{self._escape_sql(ingredient.name)}', '{self._escape_sql(ingredient.english_name)}', '{self._escape_sql(ingredient.original_name)}', '{self._escape_sql(ingredient.external_id)}', {int(ingredient.is_recipe)}, {ingredient.dose_gr}, {int(ingredient.is_liquid)}, {image_path}, {ingredient.user_id});\n")
        f.write("\n")

        # In100g nutritional data
        f.write("-- Nutritional data (In100g)\n")
        f.write("DROP TABLE IF EXISTS `core_in100g`;\n")
        f.write("""CREATE TABLE `core_in100g` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `energy` double NOT NULL DEFAULT '0',
  `carbohydrate` double NOT NULL DEFAULT '0',
  `cholesterol` double NOT NULL DEFAULT '0',
  `fat` double NOT NULL DEFAULT '0',
  `fiber` double NOT NULL DEFAULT '0',
  `protein` double NOT NULL DEFAULT '0',
  `water` double NOT NULL DEFAULT '0',
  `alcohol` double NOT NULL DEFAULT '0',
  `starch` double NOT NULL DEFAULT '0',
  `sugar` double NOT NULL DEFAULT '0',
  `salt` double NOT NULL DEFAULT '0',
  `vitaminC` double NOT NULL DEFAULT '0',
  `thiamin` double NOT NULL DEFAULT '0',
  `riboFlavin` double NOT NULL DEFAULT '0',
  `niacin` double NOT NULL DEFAULT '0',
  `vitaminB6` double NOT NULL DEFAULT '0',
  `folate` double NOT NULL DEFAULT '0',
  `vitaminB12` double NOT NULL DEFAULT '0',
  `vitaminA` double NOT NULL DEFAULT '0',
  `vitaminD` double NOT NULL DEFAULT '0',
  `calcium` double NOT NULL DEFAULT '0',
  `iron` double NOT NULL DEFAULT '0',
  `magnesium` double NOT NULL DEFAULT '0',
  `phosphorus` double NOT NULL DEFAULT '0',
  `potassium` double NOT NULL DEFAULT '0',
  `zinc` double NOT NULL DEFAULT '0',
  `sodium` double NOT NULL DEFAULT '0',
  `saturated_fatty_acids` double NOT NULL DEFAULT '0',
  `monoUnsaturatedFattyAcids` double NOT NULL DEFAULT '0',
  `polyUnsaturatedFattyAcids` double NOT NULL DEFAULT '0',
  `transFattyAcids` double NOT NULL DEFAULT '0',
  `ingredient_id` bigint DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        for nutrition in In100g.objects.all():
            ingredient_id = nutrition.ingredient_id if nutrition.ingredient_id else 'NULL'
            f.write(f"INSERT INTO `core_in100g` VALUES ({nutrition.id}, {nutrition.energy}, {nutrition.carbohydrate}, {nutrition.cholesterol}, {nutrition.fat}, {nutrition.fiber}, {nutrition.protein}, {nutrition.water}, {nutrition.alcohol}, {nutrition.starch}, {nutrition.sugar}, {nutrition.salt}, {nutrition.vitamin_c}, {nutrition.thiamin}, {nutrition.ribo_flavin}, {nutrition.niacin}, {nutrition.vitamin_b6}, {nutrition.folate}, {nutrition.vitamin_b12}, {nutrition.vitamin_a}, {nutrition.vitamin_d}, {nutrition.calcium}, {nutrition.iron}, {nutrition.magnesium}, {nutrition.phosphorus}, {nutrition.potassium}, {nutrition.zinc}, {nutrition.sodium}, {nutrition.saturated_fatty_acids}, {nutrition.mono_unsaturated_fatty_acids}, {nutrition.poly_unsaturated_fatty_acids}, {nutrition.trans_fatty_acids}, {ingredient_id});\n")
        f.write("\n")

        # FattyAcids
        f.write("-- Fatty Acids\n")
        f.write("DROP TABLE IF EXISTS `core_fattyacids`;\n")
        f.write("""CREATE TABLE `core_fattyacids` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `saturatedFattyAcids` double NOT NULL DEFAULT '0',
  `monoUnsaturatedFattyAcids` double NOT NULL DEFAULT '0',
  `polyUnsaturatedFattyAcids` double NOT NULL DEFAULT '0',
  `transFattyAcids` double NOT NULL DEFAULT '0',
  `ingredient_id` bigint DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        for fatty_acids in FattyAcids.objects.all():
            ingredient_id = fatty_acids.ingredient_id if fatty_acids.ingredient_id else 'NULL'
            f.write(f"INSERT INTO `core_fattyacids` VALUES ({fatty_acids.id}, {fatty_acids.saturated_fatty_acids}, {fatty_acids.mono_unsaturated_fatty_acids}, {fatty_acids.poly_unsaturated_fatty_acids}, {fatty_acids.trans_fatty_acids}, {ingredient_id});\n")
        f.write("\n")

        # Vitamins
        f.write("-- Vitamins\n")
        f.write("DROP TABLE IF EXISTS `core_vitamins`;\n")
        f.write("""CREATE TABLE `core_vitamins` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `vitaminC` double NOT NULL DEFAULT '0',
  `thiamin` double NOT NULL DEFAULT '0',
  `riboFlavin` double NOT NULL DEFAULT '0',
  `niacin` double NOT NULL DEFAULT '0',
  `vitaminB6` double NOT NULL DEFAULT '0',
  `folate` double NOT NULL DEFAULT '0',
  `vitaminB12` double NOT NULL DEFAULT '0',
  `vitaminA` double NOT NULL DEFAULT '0',
  `vitaminD` double NOT NULL DEFAULT '0',
  `ingredient_id` bigint DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        for vitamins in Vitamins.objects.all():
            ingredient_id = vitamins.ingredient_id if vitamins.ingredient_id else 'NULL'
            f.write(f"INSERT INTO `core_vitamins` VALUES ({vitamins.id}, {vitamins.vitamin_c}, {vitamins.thiamin}, {vitamins.ribo_flavin}, {vitamins.niacin}, {vitamins.vitamin_b6}, {vitamins.folate}, {vitamins.vitamin_b12}, {vitamins.vitamin_a}, {vitamins.vitamin_d}, {ingredient_id});\n")
        f.write("\n")

        # Minerals
        f.write("-- Minerals\n")
        f.write("DROP TABLE IF EXISTS `core_minerals`;\n")
        f.write("""CREATE TABLE `core_minerals` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `calcium` double NOT NULL DEFAULT '0',
  `iron` double NOT NULL DEFAULT '0',
  `magnesium` double NOT NULL DEFAULT '0',
  `phosphorus` double NOT NULL DEFAULT '0',
  `potassium` double NOT NULL DEFAULT '0',
  `zinc` double NOT NULL DEFAULT '0',
  `sodium` double NOT NULL DEFAULT '0',
  `ingredient_id` bigint DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        for minerals in Minerals.objects.all():
            ingredient_id = minerals.ingredient_id if minerals.ingredient_id else 'NULL'
            f.write(f"INSERT INTO `core_minerals` VALUES ({minerals.id}, {minerals.calcium}, {minerals.iron}, {minerals.magnesium}, {minerals.phosphorus}, {minerals.potassium}, {minerals.zinc}, {minerals.sodium}, {ingredient_id});\n")
        f.write("\n")

        # Ingredient-Group relationships
        f.write("-- Ingredient-Group relationships\n")
        f.write("DROP TABLE IF EXISTS `core_ingredient_groups`;\n")
        f.write("""CREATE TABLE `core_ingredient_groups` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `ingredient_id` bigint NOT NULL,
  `group_id` bigint NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `core_ingredient_groups_ingredient_id_group_id` (`ingredient_id`,`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        relationship_id = 1
        for ingredient in Ingredient.objects.all():
            for group in ingredient.groups.all():
                f.write(f"INSERT INTO `core_ingredient_groups` VALUES ({relationship_id}, {ingredient.id}, {group.id});\n")
                relationship_id += 1
        f.write("\n")

    def _export_recipes(self, f):
        """Export recipe data"""
        f.write("-- Recipes\n")
        f.write("DROP TABLE IF EXISTS `core_recipe`;\n")
        f.write("""CREATE TABLE `core_recipe` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL DEFAULT '',
  `description` longtext NOT NULL,
  `link` varchar(255) NOT NULL DEFAULT '',
  `image` varchar(100) DEFAULT NULL,
  `external_id` int DEFAULT NULL,
  `is_orderable` tinyint(1) NOT NULL DEFAULT '0',
  `is_hidden` tinyint(1) NOT NULL DEFAULT '0',
  `creation_time` datetime(6) DEFAULT NULL,
  `modification_time` datetime(6) DEFAULT NULL,
  `average_rating` double NOT NULL DEFAULT '0',
  `global_cooked_count` int unsigned NOT NULL DEFAULT '0',
  `global_skip_count` int unsigned NOT NULL DEFAULT '0',
  `preference_score` double NOT NULL DEFAULT '0',
  `user_id` int NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `external_id` (`external_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        for recipe in Recipe.objects.all():
            image_path = f"'{recipe.image.name}'" if recipe.image else 'NULL'
            external_id = recipe.external_id if recipe.external_id else 'NULL'
            creation_time = f"'{recipe.creation_time.strftime('%Y-%m-%d %H:%M:%S.%f')}'" if recipe.creation_time else 'NULL'
            modification_time = f"'{recipe.modification_time.strftime('%Y-%m-%d %H:%M:%S.%f')}'" if recipe.modification_time else 'NULL'

            f.write(f"INSERT INTO `core_recipe` VALUES ({recipe.id}, '{self._escape_sql(recipe.title)}', '{self._escape_sql(recipe.description)}', '{self._escape_sql(recipe.link)}', {image_path}, {external_id}, {int(recipe.is_orderable)}, {int(recipe.is_hidden)}, {creation_time}, {modification_time}, {recipe.average_rating}, {recipe.global_cooked_count}, {recipe.global_skip_count}, {recipe.preference_score}, {recipe.user_id});\n")
        f.write("\n")

    def _export_recipe_ingredients(self, f):
        """Export recipe-ingredient relationships with quantities"""
        f.write("-- Recipe-Ingredient relationships\n")
        f.write("DROP TABLE IF EXISTS `core_recipeingredient`;\n")
        f.write("""CREATE TABLE `core_recipeingredient` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `quantity` double NOT NULL DEFAULT '0',
  `notes` varchar(255) NOT NULL DEFAULT '',
  `ingredient_id` bigint NOT NULL,
  `recipe_id` bigint NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `core_recipeingredient_recipe_id_ingredient_id` (`recipe_id`,`ingredient_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        for recipe_ingredient in RecipeIngredient.objects.all():
            f.write(f"INSERT INTO `core_recipeingredient` VALUES ({recipe_ingredient.id}, {recipe_ingredient.quantity}, '{self._escape_sql(recipe_ingredient.notes)}', {recipe_ingredient.ingredient_id}, {recipe_ingredient.recipe_id});\n")
        f.write("\n")

        # Legacy ingredients relationship
        f.write("-- Recipe-Ingredient legacy relationships\n")
        f.write("DROP TABLE IF EXISTS `core_recipe_ingredients`;\n")
        f.write("""CREATE TABLE `core_recipe_ingredients` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `recipe_id` bigint NOT NULL,
  `ingredient_id` bigint NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `core_recipe_ingredients_recipe_id_ingredient_id` (`recipe_id`,`ingredient_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        relationship_id = 1
        for recipe in Recipe.objects.all():
            for ingredient in recipe.ingredients.all():
                f.write(f"INSERT INTO `core_recipe_ingredients` VALUES ({relationship_id}, {recipe.id}, {ingredient.id});\n")
                relationship_id += 1
        f.write("\n")

    def _export_recipe_tags(self, f):
        """Export recipe-tag relationships"""
        f.write("-- Recipe-Tag relationships\n")
        f.write("DROP TABLE IF EXISTS `core_recipe_tags`;\n")
        f.write("""CREATE TABLE `core_recipe_tags` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `recipe_id` bigint NOT NULL,
  `tag_id` bigint NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `core_recipe_tags_recipe_id_tag_id` (`recipe_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n\n""")

        relationship_id = 1
        for recipe in Recipe.objects.all():
            for tag in recipe.tags.all():
                f.write(f"INSERT INTO `core_recipe_tags` VALUES ({relationship_id}, {recipe.id}, {tag.id});\n")
                relationship_id += 1
        f.write("\n")

    def _escape_sql(self, value):
        """Escape SQL string values"""
        if value is None:
            return ''
        return str(value).replace("'", "''").replace("\\", "\\\\")